{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home \u00b6 Celery is a free ROBLOX exploit. You can also join the Celery Discord .","title":"Home"},{"location":"#home","text":"Celery is a free ROBLOX exploit. You can also join the Celery Discord .","title":"Home"},{"location":"lua/","text":"Lua API \u00b6 Function declarations \u00b6 Template Example function name (): returntype function print ( < string > text ): void The functions are declared as shown above in the whole \"Lua API\" section.","title":"Lua API"},{"location":"lua/#lua-api","text":"","title":"Lua API"},{"location":"lua/#function-declarations","text":"Template Example function name (): returntype function print ( < string > text ): void The functions are declared as shown above in the whole \"Lua API\" section.","title":"Function declarations"},{"location":"lua/debug/","text":"Debug Library \u00b6 Disclaimer #1 Synapse claims that there's an ACE vulnerability but they won't provide any evidence of what was involved to actually execute shell-code. The possibility of such a thing happening, when you have more than usual sanitization checks, would rely on external means or another custom function that is apparently flawed. Until this other function is uncovered and the ACE is actually proven not by some staged video, the actual cause of the ACE is unknown, and I will not remove my debug library Disclaimer #2 Use obfuscated scripts at your own risk, since any obfuscated script can destroy your PC at any given time, and even synapse cannot fully prevent this. Use obfuscated scripts only if they're from a TRUSTED source. I will not take responsibility for it Constants \u00b6 Get constants \u00b6 Function definition function debug . getconstants ( < function > f ): table Returns the constants used in function f . Set constants \u00b6 Function definition function debug . setconstants ( < function > f , < table > constants ): void Sets the constants used in function f to the table constants . Get constant \u00b6 Function definition function debug . getconstant ( < function > f , < number > index ): Variant Returns the constant at index from the function f 's constants. Set constant \u00b6 Function definition function debug . setconstant ( < function > f , < number > index , < Variant > constant ): void Sets the constant at index from function f to constant . Protos \u00b6 Get protos \u00b6 Function definition function debug . getprotos ( < function > f ): table Returns the protos used in function f . Set protos \u00b6 Function definition function debug . setprotos ( < function > f , < table > protos ): void Sets the protos used in function f to the table protos . Get proto \u00b6 Function definition function debug . getproto ( < function > f , < number > index ): function Returns the proto at index from the function f 's protos. Set proto \u00b6 Function definition function debug . setproto ( < function > f , < number > index , < function > proto ): void Sets the proto at index from the function f 's protos to proto . Instructions/code \u00b6 Get code \u00b6 Function definition (1 arg) Function definition (2 args) function debug . getcode ( < function > f ): table Returns the instructions in function f 's code. function debug . getcode ( < function > f , < number > index ): number Returns the instruction at index from function f 's code. Set code \u00b6 Function definition (2 args) Function definition (3 args) function debug . setcode ( < function > f , < table > code ): void Set the instructions in function f to code . function debug . setcode ( < function > f , < number > index , < number > instruction ): void Sets the instruction at index from function f 's code to instruction . Warning Disabled unless you are in experimental mode Stack \u00b6 Get stack \u00b6 Function definition (no args) Function definition (1 arg) function debug . getstack (): table Returns all elements in the current thread's stack. function debug . getstack ( < number > index ): Variant Returns the element at index from the current function's stack. Set stack \u00b6 Function definition (1 argument) Function definition (2 arguments) function debug . setstack ( < table > stack ): void Sets the current thread's stack to stack . function debug . setstack ( < number > index , < Variant > value ): void Sets the element at index from the current function's stack to value . Upvalues \u00b6 Get upvalues \u00b6 Function definition function debug . getupvalues ( < function > f ): table Returns the upvalues in the function f . Set upvalues \u00b6 Function definition function debug . setupvalues ( < function > f , < table > upvalues ): void Sets the upvalues in the function f to upvalues . Get upvalue \u00b6 Function definition function debug . getupvalue ( < function > f , < number > index ): Variant Returns the upvalue at index from the function f 's upvalues. Set upvalue \u00b6 Function definition function debug . setupvalue ( < function > f , < number > index , < Variant > value ): void Sets the upvalue at index from the function f 's upvalues to value .","title":"Debug Library"},{"location":"lua/debug/#debug-library","text":"Disclaimer #1 Synapse claims that there's an ACE vulnerability but they won't provide any evidence of what was involved to actually execute shell-code. The possibility of such a thing happening, when you have more than usual sanitization checks, would rely on external means or another custom function that is apparently flawed. Until this other function is uncovered and the ACE is actually proven not by some staged video, the actual cause of the ACE is unknown, and I will not remove my debug library Disclaimer #2 Use obfuscated scripts at your own risk, since any obfuscated script can destroy your PC at any given time, and even synapse cannot fully prevent this. Use obfuscated scripts only if they're from a TRUSTED source. I will not take responsibility for it","title":"Debug Library"},{"location":"lua/debug/#constants","text":"","title":"Constants"},{"location":"lua/debug/#get-constants","text":"Function definition function debug . getconstants ( < function > f ): table Returns the constants used in function f .","title":"Get constants"},{"location":"lua/debug/#set-constants","text":"Function definition function debug . setconstants ( < function > f , < table > constants ): void Sets the constants used in function f to the table constants .","title":"Set constants"},{"location":"lua/debug/#get-constant","text":"Function definition function debug . getconstant ( < function > f , < number > index ): Variant Returns the constant at index from the function f 's constants.","title":"Get constant"},{"location":"lua/debug/#set-constant","text":"Function definition function debug . setconstant ( < function > f , < number > index , < Variant > constant ): void Sets the constant at index from function f to constant .","title":"Set constant"},{"location":"lua/debug/#protos","text":"","title":"Protos"},{"location":"lua/debug/#get-protos","text":"Function definition function debug . getprotos ( < function > f ): table Returns the protos used in function f .","title":"Get protos"},{"location":"lua/debug/#set-protos","text":"Function definition function debug . setprotos ( < function > f , < table > protos ): void Sets the protos used in function f to the table protos .","title":"Set protos"},{"location":"lua/debug/#get-proto","text":"Function definition function debug . getproto ( < function > f , < number > index ): function Returns the proto at index from the function f 's protos.","title":"Get proto"},{"location":"lua/debug/#set-proto","text":"Function definition function debug . setproto ( < function > f , < number > index , < function > proto ): void Sets the proto at index from the function f 's protos to proto .","title":"Set proto"},{"location":"lua/debug/#instructionscode","text":"","title":"Instructions/code"},{"location":"lua/debug/#get-code","text":"Function definition (1 arg) Function definition (2 args) function debug . getcode ( < function > f ): table Returns the instructions in function f 's code. function debug . getcode ( < function > f , < number > index ): number Returns the instruction at index from function f 's code.","title":"Get code"},{"location":"lua/debug/#set-code","text":"Function definition (2 args) Function definition (3 args) function debug . setcode ( < function > f , < table > code ): void Set the instructions in function f to code . function debug . setcode ( < function > f , < number > index , < number > instruction ): void Sets the instruction at index from function f 's code to instruction . Warning Disabled unless you are in experimental mode","title":"Set code"},{"location":"lua/debug/#stack","text":"","title":"Stack"},{"location":"lua/debug/#get-stack","text":"Function definition (no args) Function definition (1 arg) function debug . getstack (): table Returns all elements in the current thread's stack. function debug . getstack ( < number > index ): Variant Returns the element at index from the current function's stack.","title":"Get stack"},{"location":"lua/debug/#set-stack","text":"Function definition (1 argument) Function definition (2 arguments) function debug . setstack ( < table > stack ): void Sets the current thread's stack to stack . function debug . setstack ( < number > index , < Variant > value ): void Sets the element at index from the current function's stack to value .","title":"Set stack"},{"location":"lua/debug/#upvalues","text":"","title":"Upvalues"},{"location":"lua/debug/#get-upvalues","text":"Function definition function debug . getupvalues ( < function > f ): table Returns the upvalues in the function f .","title":"Get upvalues"},{"location":"lua/debug/#set-upvalues","text":"Function definition function debug . setupvalues ( < function > f , < table > upvalues ): void Sets the upvalues in the function f to upvalues .","title":"Set upvalues"},{"location":"lua/debug/#get-upvalue","text":"Function definition function debug . getupvalue ( < function > f , < number > index ): Variant Returns the upvalue at index from the function f 's upvalues.","title":"Get upvalue"},{"location":"lua/debug/#set-upvalue","text":"Function definition function debug . setupvalue ( < function > f , < number > index , < Variant > value ): void Sets the upvalue at index from the function f 's upvalues to value .","title":"Set upvalue"},{"location":"lua/drawing/","text":"Drawing library \u00b6 Drawing new \u00b6 Function definition function Drawing . new ( < string > classname ): Instance Creates a new drawing object. classname can be any of the following: \"text\" \"line\" \"triangle\" \"square\" \"circle\" \"quad\" (basically four points that you can control, see at as each corner of a square or as a 4 point triangle)","title":"Drawing Library"},{"location":"lua/drawing/#drawing-library","text":"","title":"Drawing library"},{"location":"lua/drawing/#drawing-new","text":"Function definition function Drawing . new ( < string > classname ): Instance Creates a new drawing object. classname can be any of the following: \"text\" \"line\" \"triangle\" \"square\" \"circle\" \"quad\" (basically four points that you can control, see at as each corner of a square or as a 4 point triangle)","title":"Drawing new"},{"location":"lua/io/","text":"I/O & HTTP \u00b6 Filesystem \u00b6 Read file \u00b6 Function definition function readfile ( < string > path ): string Reads the content of the file at path as a string. This works with plain-text and binary files. Write file \u00b6 Function definition function writefile ( < string > path , < string > content ): string Writes the string content to the file located at path . Only string content is supported. Clipboard \u00b6 Get clipboard \u00b6 Function definition function getclipboard (): string Returns the text that is saved to the host machine's clipboard. Typically achieved by doing Ctrl + V . Set clipboard \u00b6 Function definition function setclipboard ( < string > text ): string Stores text in the host machine's clipboard. Mouse/Keyboard \u00b6 Self-explanatory I/O functions which are supported: function mouse1click (): void function mouse1down (): void function mouse1up (): void function mouse2click (): void function mouse2down (): void function mouse2up (): void function presskey (): void function releasekey (): void HTTP \u00b6 HTTP GET \u00b6 Function definition function httpget ( < string > url ): string Requests the content at url and returns it's body as a plain-text string. Synapse request (syn.request) \u00b6 Function definition Arguments Response dictionary Example function syn . request ( < table > options ): table Name Type Required Description Url string The target URL for this request. Must use http or https protocols. Method string The HTTP method being used by this request. Most often GET or POST . Defaults to GET . Headers dictionary A dictionary of headers to be used with this request. Most HTTP headers are accepted here, but not all. Cookies dictionary A dictionary of cookies to be used with this request. Body string The request body . Can be any string or binary data. Must be excluded when using the GET / HEAD HTTP methods. It might be necessary to specify the Content-Type header when sending JSON or other formats. Name Type Description Success bool The success status of the request. This is true if and only if the StatusCode lies within the range [200, 299]. StatusCode number The HTTP response code identifying the status of the response. StatusMessage string The status message that was sent back. Headers dictionary A dictionary of headers that were set in this response. Cookies dictionary A dictionary of cookies that were set in this Body string The request body (content) received in the response. local response = syn . request ( { Url = \"http://httpbin.org/post\" , -- This website helps debug HTTP requests Method = \"POST\" , Headers = { [ \"Content-Type\" ] = \"application/json\" -- When sending JSON, set this! }, Body = game : GetService ( \"HttpService\" ): JSONEncode ({ hello = \"world\" }) } ) for i , v in pairs ( response ) do print ( i , v ) if type ( v ) == \"table\" then for i2 , v2 in pairs ( v ) do warn ( i2 , v2 ) end end end You can refer to S^X docs . Deprecation note game:HttpGet is supported for legacy reasons but it should not be used since it has been fully removed from ROBLOX for a couple of years now. Either use Celery's httpget or syn.request .","title":"HTTP & I/O"},{"location":"lua/io/#io-http","text":"","title":"I/O &amp; HTTP"},{"location":"lua/io/#filesystem","text":"","title":"Filesystem"},{"location":"lua/io/#read-file","text":"Function definition function readfile ( < string > path ): string Reads the content of the file at path as a string. This works with plain-text and binary files.","title":"Read file"},{"location":"lua/io/#write-file","text":"Function definition function writefile ( < string > path , < string > content ): string Writes the string content to the file located at path . Only string content is supported.","title":"Write file"},{"location":"lua/io/#clipboard","text":"","title":"Clipboard"},{"location":"lua/io/#get-clipboard","text":"Function definition function getclipboard (): string Returns the text that is saved to the host machine's clipboard. Typically achieved by doing Ctrl + V .","title":"Get clipboard"},{"location":"lua/io/#set-clipboard","text":"Function definition function setclipboard ( < string > text ): string Stores text in the host machine's clipboard.","title":"Set clipboard"},{"location":"lua/io/#mousekeyboard","text":"Self-explanatory I/O functions which are supported: function mouse1click (): void function mouse1down (): void function mouse1up (): void function mouse2click (): void function mouse2down (): void function mouse2up (): void function presskey (): void function releasekey (): void","title":"Mouse/Keyboard"},{"location":"lua/io/#http","text":"","title":"HTTP"},{"location":"lua/io/#http-get","text":"Function definition function httpget ( < string > url ): string Requests the content at url and returns it's body as a plain-text string.","title":"HTTP GET"},{"location":"lua/io/#synapse-request-synrequest","text":"Function definition Arguments Response dictionary Example function syn . request ( < table > options ): table Name Type Required Description Url string The target URL for this request. Must use http or https protocols. Method string The HTTP method being used by this request. Most often GET or POST . Defaults to GET . Headers dictionary A dictionary of headers to be used with this request. Most HTTP headers are accepted here, but not all. Cookies dictionary A dictionary of cookies to be used with this request. Body string The request body . Can be any string or binary data. Must be excluded when using the GET / HEAD HTTP methods. It might be necessary to specify the Content-Type header when sending JSON or other formats. Name Type Description Success bool The success status of the request. This is true if and only if the StatusCode lies within the range [200, 299]. StatusCode number The HTTP response code identifying the status of the response. StatusMessage string The status message that was sent back. Headers dictionary A dictionary of headers that were set in this response. Cookies dictionary A dictionary of cookies that were set in this Body string The request body (content) received in the response. local response = syn . request ( { Url = \"http://httpbin.org/post\" , -- This website helps debug HTTP requests Method = \"POST\" , Headers = { [ \"Content-Type\" ] = \"application/json\" -- When sending JSON, set this! }, Body = game : GetService ( \"HttpService\" ): JSONEncode ({ hello = \"world\" }) } ) for i , v in pairs ( response ) do print ( i , v ) if type ( v ) == \"table\" then for i2 , v2 in pairs ( v ) do warn ( i2 , v2 ) end end end You can refer to S^X docs . Deprecation note game:HttpGet is supported for legacy reasons but it should not be used since it has been fully removed from ROBLOX for a couple of years now. Either use Celery's httpget or syn.request .","title":"Synapse request (syn.request)"},{"location":"lua/misc/","text":"Miscellaneous \u00b6 Script environment \u00b6 Identify executor \u00b6 Function definition Example function identifyexecutor (): string if ({ pcall ( identifyexecutor )})[ 2 ] == \"Celery\" then print ( \"Using Celery\" ) end Returns a string to identify what executor is being used. In this case, it's \"Celery\" Get ROBLOX environment \u00b6 Function definition function getrenv (): table Returns the ROBLOX script environment. Get global environment \u00b6 Function definition function getgenv (): table Identical to getfenv () . There is no way to implement this in Celery because ROBLOX automatically sandboxes and protects each script environment for us -- so, there is no way of connecting the environments for Celery scripts, because of how it executes them. Get Lua registry \u00b6 Function definition function getreg (): table Returns a table containing all elements stored in lua registry. Get identity \u00b6 Function definition function getidentity (): number Returns the context level of execution that the script is running with, most likely 6 . Set identity \u00b6 Function definition function setidentity ( < number > identity ): void Sets the current context level to identity . Tables \u00b6 Is read only \u00b6 Function definition function isreadonly ( < table > t ): bool Returns whether the table t is read only or not. Set read only \u00b6 Function definition function setreadonly ( < table > t , < bool > value ): value Sets whether the table t is read only or not. Make read only \u00b6 Function definition function makereadonly ( < table > t ): table Sets table t to read only. Equal to doing setreadonly ( t , true ) . Returns table t . Make writeable \u00b6 Function definition function makewriteable ( < table > t ): void Makes the table t write-able (not read only). Equal to doing setreadonly(t, false) . Functions \u00b6 Is C closure \u00b6 Function definition function iscclosure ( < function > f ): bool Returns true is f is a C closure and not a Lua function. New C closure \u00b6 Function definition function newcclosure ( < function > f ): function Returns a C closure function which invokes the Lua function f Hook function \u00b6 Function definition function hookfunction ( < function > a , < function > b ): bool Swaps the internal function of a with b , so every time a is called it will call b instead. Returns the old a function. Get namecall method \u00b6 Function definition function getnamecallmethod (): string Returns the current namecall method used by __namecall , as a string. Set namecall method \u00b6 Function definition function setnamecallmethod ( < string > method ): string Sets the current namecall method used by __namecall to method . Get raw metatable \u00b6 Function definition function getrawmetatable ( < table > t ): table Returns the raw metatable of t -- basically just bypasses the __metatable check for it. Instances \u00b6 Scripts \u00b6 Get script bytecode \u00b6 Function definition function getscriptbytecode ( < Instance < LocalScript >> localscript ): string Returns the LuaU bytecode contained in the localscript script. Warning ModuleScripts are not supported yet Dissasemble bytecode \u00b6 Function definition function disassemble ( < string > bytecode ): string Translates a script's bytecode into a readable, disassembled output. Decompile script \u00b6 Function definition function decompile ( < Instance < LocalScript >> localscript ): string Decompiles a localscript 's bytecode into readable lua, as close to the original script as possible. Fire click detector \u00b6 Function definition function fireclickdetector ( < Instance < ClickDetector >> clickdetector ): void Fires the clickdetector instance -- calling any signals connected to it. Fire touch interest \u00b6 Function definition function firetouchinterest ( < Instance > part , < BasePart > toTouch , < number > mode ): void Fires toTouch 's TouchInterest. Note The toTouch argument must have a child with class TouchTransmitter in order for this function to work. Get hidden properties \u00b6 Function definition function gethiddenproperties ( < Instance > instance ): table Returns hidden lua properties associated with instance . Get hidden property \u00b6 Function definition function gethiddenproperty ( Instance instance , String property ): Variant Gets the hidden property property from instance . Set hidden property \u00b6 Function definition function sethiddenproperty ( < Instance > instance , < string > property , < Variant > value ): void Sets the hidden property property of instance to value . Client \u00b6 Get simulation radius \u00b6 Function definition function getsimulationradius (): number Returns your client's simulation radius. Set simulation radius \u00b6 Function definition function setsimulationradius ( < number > value ): void Sets your client's simulation radius to value .","title":"Miscellaneous"},{"location":"lua/misc/#miscellaneous","text":"","title":"Miscellaneous"},{"location":"lua/misc/#script-environment","text":"","title":"Script environment"},{"location":"lua/misc/#identify-executor","text":"Function definition Example function identifyexecutor (): string if ({ pcall ( identifyexecutor )})[ 2 ] == \"Celery\" then print ( \"Using Celery\" ) end Returns a string to identify what executor is being used. In this case, it's \"Celery\"","title":"Identify executor"},{"location":"lua/misc/#get-roblox-environment","text":"Function definition function getrenv (): table Returns the ROBLOX script environment.","title":"Get ROBLOX environment"},{"location":"lua/misc/#get-global-environment","text":"Function definition function getgenv (): table Identical to getfenv () . There is no way to implement this in Celery because ROBLOX automatically sandboxes and protects each script environment for us -- so, there is no way of connecting the environments for Celery scripts, because of how it executes them.","title":"Get global environment"},{"location":"lua/misc/#get-lua-registry","text":"Function definition function getreg (): table Returns a table containing all elements stored in lua registry.","title":"Get Lua registry"},{"location":"lua/misc/#get-identity","text":"Function definition function getidentity (): number Returns the context level of execution that the script is running with, most likely 6 .","title":"Get identity"},{"location":"lua/misc/#set-identity","text":"Function definition function setidentity ( < number > identity ): void Sets the current context level to identity .","title":"Set identity"},{"location":"lua/misc/#tables","text":"","title":"Tables"},{"location":"lua/misc/#is-read-only","text":"Function definition function isreadonly ( < table > t ): bool Returns whether the table t is read only or not.","title":"Is read only"},{"location":"lua/misc/#set-read-only","text":"Function definition function setreadonly ( < table > t , < bool > value ): value Sets whether the table t is read only or not.","title":"Set read only"},{"location":"lua/misc/#make-read-only","text":"Function definition function makereadonly ( < table > t ): table Sets table t to read only. Equal to doing setreadonly ( t , true ) . Returns table t .","title":"Make read only"},{"location":"lua/misc/#make-writeable","text":"Function definition function makewriteable ( < table > t ): void Makes the table t write-able (not read only). Equal to doing setreadonly(t, false) .","title":"Make writeable"},{"location":"lua/misc/#functions","text":"","title":"Functions"},{"location":"lua/misc/#is-c-closure","text":"Function definition function iscclosure ( < function > f ): bool Returns true is f is a C closure and not a Lua function.","title":"Is C closure"},{"location":"lua/misc/#new-c-closure","text":"Function definition function newcclosure ( < function > f ): function Returns a C closure function which invokes the Lua function f","title":"New C closure"},{"location":"lua/misc/#hook-function","text":"Function definition function hookfunction ( < function > a , < function > b ): bool Swaps the internal function of a with b , so every time a is called it will call b instead. Returns the old a function.","title":"Hook function"},{"location":"lua/misc/#get-namecall-method","text":"Function definition function getnamecallmethod (): string Returns the current namecall method used by __namecall , as a string.","title":"Get namecall method"},{"location":"lua/misc/#set-namecall-method","text":"Function definition function setnamecallmethod ( < string > method ): string Sets the current namecall method used by __namecall to method .","title":"Set namecall method"},{"location":"lua/misc/#get-raw-metatable","text":"Function definition function getrawmetatable ( < table > t ): table Returns the raw metatable of t -- basically just bypasses the __metatable check for it.","title":"Get raw metatable"},{"location":"lua/misc/#instances","text":"","title":"Instances"},{"location":"lua/misc/#scripts","text":"","title":"Scripts"},{"location":"lua/misc/#get-script-bytecode","text":"Function definition function getscriptbytecode ( < Instance < LocalScript >> localscript ): string Returns the LuaU bytecode contained in the localscript script. Warning ModuleScripts are not supported yet","title":"Get script bytecode"},{"location":"lua/misc/#dissasemble-bytecode","text":"Function definition function disassemble ( < string > bytecode ): string Translates a script's bytecode into a readable, disassembled output.","title":"Dissasemble bytecode"},{"location":"lua/misc/#decompile-script","text":"Function definition function decompile ( < Instance < LocalScript >> localscript ): string Decompiles a localscript 's bytecode into readable lua, as close to the original script as possible.","title":"Decompile script"},{"location":"lua/misc/#fire-click-detector","text":"Function definition function fireclickdetector ( < Instance < ClickDetector >> clickdetector ): void Fires the clickdetector instance -- calling any signals connected to it.","title":"Fire click detector"},{"location":"lua/misc/#fire-touch-interest","text":"Function definition function firetouchinterest ( < Instance > part , < BasePart > toTouch , < number > mode ): void Fires toTouch 's TouchInterest. Note The toTouch argument must have a child with class TouchTransmitter in order for this function to work.","title":"Fire touch interest"},{"location":"lua/misc/#get-hidden-properties","text":"Function definition function gethiddenproperties ( < Instance > instance ): table Returns hidden lua properties associated with instance .","title":"Get hidden properties"},{"location":"lua/misc/#get-hidden-property","text":"Function definition function gethiddenproperty ( Instance instance , String property ): Variant Gets the hidden property property from instance .","title":"Get hidden property"},{"location":"lua/misc/#set-hidden-property","text":"Function definition function sethiddenproperty ( < Instance > instance , < string > property , < Variant > value ): void Sets the hidden property property of instance to value .","title":"Set hidden property"},{"location":"lua/misc/#client","text":"","title":"Client"},{"location":"lua/misc/#get-simulation-radius","text":"Function definition function getsimulationradius (): number Returns your client's simulation radius.","title":"Get simulation radius"},{"location":"lua/misc/#set-simulation-radius","text":"Function definition function setsimulationradius ( < number > value ): void Sets your client's simulation radius to value .","title":"Set simulation radius"},{"location":"lua/rnet/","text":"RakNet \u00b6 Often abreviated as rnet , RakNet is the protocol Roblox uses for sending/receiving multiplayer packets. Packets type \u00b6 Opcodes <-> Name relation Table representation You can take a look at Arissath's roblox-dissector/Sala's RakNet Layer Opcode Type 0x00 ID_CONNECTED_PING 0x01 ID_UNCONNECTED_PING 0x03 ID_CONNECTED_PONG 0x04 ID_DETECT_LOST_CONNECTIONS 0x05 ID_OPEN_CONNECTION_REQUEST_1 0x06 ID_OPEN_CONNECTION_REPLY_1 0x07 ID_OPEN_CONNECTION_REQUEST_2 0x08 ID_OPEN_CONNECTION_REPLY_2 0x09 ID_CONNECTION_REQUEST 0x10 ID_CONNECTION_REQUEST_ACCEPTED 0x11 ID_CONNECTION_ATTEMPT_FAILED 0x13 ID_NEW_INCOMING_CONNECTION 0x15 ID_DISCONNECTION_NOTIFICATION 0x18 ID_INVALID_PASSWORD 0x1B ID_TIMESTAMP 0x1C ID_UNCONNECTED_PONG 0x81 ID_SET_GLOBALS 0x82 ID_TEACH_DESCRIPTOR_DICTIONARIES 0x83 ID_DATA 0x84 ID_MARKER 0x85 ID_PHYSICS 0x86 ID_TOUCHES 0x87 ID_CHAT_ALL 0x88 ID_CHAT_TEAM 0x89 ID_REPORT_ABUSE 0x8A ID_SUBMIT_TICKET 0x8B ID_CHAT_GAME 0x8C ID_CHAT_PLAYER 0x8D ID_CLUSTER 0x8E ID_PROTOCOL_MISMATCH 0x8F ID_PREFERRED_SPAWN_NAME 0x90 ID_PROTOCOL_SYNC 0x91 ID_SCHEMA_SYNC 0x92 ID_PLACEID_VERIFICATION 0x93 ID_DICTIONARY_FORMAT 0x94 ID_HASH_MISMATCH 0x95 ID_SECURITYKEY_MISMATCH 0x96 ID_REQUEST_STATS 0x97 ID_NEW_SCHEMA Send position \u00b6 Function definition function rnet . sendposition ( < vector3 > value ): void Tells the server to locate your character at the position value. Start capture \u00b6 Function definition function rnet . startcapture (): void Displays outgoing packets in Celery's debug console. Stop capture \u00b6 Function definition function rnet . stopcapture (): void Stops outgoing packets from being displayed in Celery's debug console. Capture signal \u00b6 Signal definition Example Signal rnet . Capture local packetViewer = rnet . Capture : Connect ( function ( packet ) local str = \"\" ; for _ , v in pairs ( packet . data ) do str = str .. string.format ( \"%02X \" , v ); end print ( \"Sending packet... ID: \" .. string.format ( \"%02X\" , packet . id ) .. \". Full packet:\" ); print ( str ); print ( \" \\n \" ); end ) wait ( 30 ); packetViewer : disconnect (); This event allows you to view/log packets yourself, to display them however you want. Set filter \u00b6 Function definition function rnet . setfilter ( < table > t ): void Sets a packet filter of packets to be ignored, or completely blocked. The first couple of bytes in the packet will be compared with the bytes in t . If a packet starts with 1B and you run rnet . setfilter ({ 0x1B }) then the packet will be blocked. Use rnet . setfilter ({}) to clear this filter. Send raw \u00b6 Function definition Fencing example Sword fights example function rnet . sendraw ( < string | table > value ): void toolname = \"Foil\" tool = game . Players . LocalPlayer . Backpack [ toolname ]; game . Players . LocalPlayer . Character . Humanoid : UnequipTools (); wait ( .1 ); game . Players . LocalPlayer . Character . Humanoid : EquipTool ( tool ); local t = { 0 }; while not ( t [ 1 ] == 0x83 and t [ 2 ] == 3 and t [ 3 ] == 1 ) do t = rnet . getpacket (); -- automatically suspends/waits end local equip_packet = \"\" ; for _ , v in pairs ( t ) do equip_packet = equip_packet .. string.format ( \"%02X \" , v ); end print ( \"Equip tool packet: \" , equip_packet ); setclipboard ( equip_packet ); game . Players . LocalPlayer . Character . Humanoid : UnequipTools (); wait ( 1 ); rnet . sendraw ( equip_packet ); Here's an example which can be used in Fencing , which gets the packet for equipping your tool. It then replays this packet, after the tool has been unequipped. If you look at this from another ROBLOX client joined in the same server, you will see that the foil is not being held properly. This is because another packet is expected to make your character's arm actually hold the tool. user = game . Players . LocalPlayer mouse = user : GetMouse (); pressed = false ; control = nil ; mouse . KeyDown : Connect ( function ( key ) if key : lower () == 'f' then pressed = true ; end if key : lower () == 's' then control = nil ; end if key : lower () == 'r' then for _ , v in pairs ( user . Character : GetChildren ()) do if v : IsA ( \"Tool\" ) then v . Parent = workspace ; end end end end ) mouse . KeyUp : Connect ( function ( key ) if key : lower () == 'f' then pressed = false ; end end ) mouse . Button1Down : Connect ( function () if pressed then print 'TPing' ; local target = mouse . Target if target then if not target . Anchored then local pos = mouse . Hit . p ; local force = 5 ; for i = 1 , force do rnet . sendposition ( pos ); target . CFrame = user . Character . HumanoidRootPart . CFrame ; control = target ; wait ( .01 ); rnet . sendposition ( user . Character . Head . Position ); wait ( .01 ); end user . Character : MoveTo ( user . Character . Head . Position ) end end end end ) while wait () do if control then control . Velocity = Vector3 . new ( 0 , 40 , 0 ); end end Hold down F and click a part to bring it to you. Then, hold F and click a player to teleport them There's a weird effect which actually brings players with the object if it's a certain mass. You can ONLY move unanchored parts, so in sword fights on the heights, that would be the gyro plates and lava spinners (click them). Sends a packet to the ROBLOX network, either by a hex-formatted String or a Table of bytes.","title":"RakNet"},{"location":"lua/rnet/#raknet","text":"Often abreviated as rnet , RakNet is the protocol Roblox uses for sending/receiving multiplayer packets.","title":"RakNet"},{"location":"lua/rnet/#packets-type","text":"Opcodes <-> Name relation Table representation You can take a look at Arissath's roblox-dissector/Sala's RakNet Layer Opcode Type 0x00 ID_CONNECTED_PING 0x01 ID_UNCONNECTED_PING 0x03 ID_CONNECTED_PONG 0x04 ID_DETECT_LOST_CONNECTIONS 0x05 ID_OPEN_CONNECTION_REQUEST_1 0x06 ID_OPEN_CONNECTION_REPLY_1 0x07 ID_OPEN_CONNECTION_REQUEST_2 0x08 ID_OPEN_CONNECTION_REPLY_2 0x09 ID_CONNECTION_REQUEST 0x10 ID_CONNECTION_REQUEST_ACCEPTED 0x11 ID_CONNECTION_ATTEMPT_FAILED 0x13 ID_NEW_INCOMING_CONNECTION 0x15 ID_DISCONNECTION_NOTIFICATION 0x18 ID_INVALID_PASSWORD 0x1B ID_TIMESTAMP 0x1C ID_UNCONNECTED_PONG 0x81 ID_SET_GLOBALS 0x82 ID_TEACH_DESCRIPTOR_DICTIONARIES 0x83 ID_DATA 0x84 ID_MARKER 0x85 ID_PHYSICS 0x86 ID_TOUCHES 0x87 ID_CHAT_ALL 0x88 ID_CHAT_TEAM 0x89 ID_REPORT_ABUSE 0x8A ID_SUBMIT_TICKET 0x8B ID_CHAT_GAME 0x8C ID_CHAT_PLAYER 0x8D ID_CLUSTER 0x8E ID_PROTOCOL_MISMATCH 0x8F ID_PREFERRED_SPAWN_NAME 0x90 ID_PROTOCOL_SYNC 0x91 ID_SCHEMA_SYNC 0x92 ID_PLACEID_VERIFICATION 0x93 ID_DICTIONARY_FORMAT 0x94 ID_HASH_MISMATCH 0x95 ID_SECURITYKEY_MISMATCH 0x96 ID_REQUEST_STATS 0x97 ID_NEW_SCHEMA","title":"Packets type"},{"location":"lua/rnet/#send-position","text":"Function definition function rnet . sendposition ( < vector3 > value ): void Tells the server to locate your character at the position value.","title":"Send position"},{"location":"lua/rnet/#start-capture","text":"Function definition function rnet . startcapture (): void Displays outgoing packets in Celery's debug console.","title":"Start capture"},{"location":"lua/rnet/#stop-capture","text":"Function definition function rnet . stopcapture (): void Stops outgoing packets from being displayed in Celery's debug console.","title":"Stop capture"},{"location":"lua/rnet/#capture-signal","text":"Signal definition Example Signal rnet . Capture local packetViewer = rnet . Capture : Connect ( function ( packet ) local str = \"\" ; for _ , v in pairs ( packet . data ) do str = str .. string.format ( \"%02X \" , v ); end print ( \"Sending packet... ID: \" .. string.format ( \"%02X\" , packet . id ) .. \". Full packet:\" ); print ( str ); print ( \" \\n \" ); end ) wait ( 30 ); packetViewer : disconnect (); This event allows you to view/log packets yourself, to display them however you want.","title":"Capture signal"},{"location":"lua/rnet/#set-filter","text":"Function definition function rnet . setfilter ( < table > t ): void Sets a packet filter of packets to be ignored, or completely blocked. The first couple of bytes in the packet will be compared with the bytes in t . If a packet starts with 1B and you run rnet . setfilter ({ 0x1B }) then the packet will be blocked. Use rnet . setfilter ({}) to clear this filter.","title":"Set filter"},{"location":"lua/rnet/#send-raw","text":"Function definition Fencing example Sword fights example function rnet . sendraw ( < string | table > value ): void toolname = \"Foil\" tool = game . Players . LocalPlayer . Backpack [ toolname ]; game . Players . LocalPlayer . Character . Humanoid : UnequipTools (); wait ( .1 ); game . Players . LocalPlayer . Character . Humanoid : EquipTool ( tool ); local t = { 0 }; while not ( t [ 1 ] == 0x83 and t [ 2 ] == 3 and t [ 3 ] == 1 ) do t = rnet . getpacket (); -- automatically suspends/waits end local equip_packet = \"\" ; for _ , v in pairs ( t ) do equip_packet = equip_packet .. string.format ( \"%02X \" , v ); end print ( \"Equip tool packet: \" , equip_packet ); setclipboard ( equip_packet ); game . Players . LocalPlayer . Character . Humanoid : UnequipTools (); wait ( 1 ); rnet . sendraw ( equip_packet ); Here's an example which can be used in Fencing , which gets the packet for equipping your tool. It then replays this packet, after the tool has been unequipped. If you look at this from another ROBLOX client joined in the same server, you will see that the foil is not being held properly. This is because another packet is expected to make your character's arm actually hold the tool. user = game . Players . LocalPlayer mouse = user : GetMouse (); pressed = false ; control = nil ; mouse . KeyDown : Connect ( function ( key ) if key : lower () == 'f' then pressed = true ; end if key : lower () == 's' then control = nil ; end if key : lower () == 'r' then for _ , v in pairs ( user . Character : GetChildren ()) do if v : IsA ( \"Tool\" ) then v . Parent = workspace ; end end end end ) mouse . KeyUp : Connect ( function ( key ) if key : lower () == 'f' then pressed = false ; end end ) mouse . Button1Down : Connect ( function () if pressed then print 'TPing' ; local target = mouse . Target if target then if not target . Anchored then local pos = mouse . Hit . p ; local force = 5 ; for i = 1 , force do rnet . sendposition ( pos ); target . CFrame = user . Character . HumanoidRootPart . CFrame ; control = target ; wait ( .01 ); rnet . sendposition ( user . Character . Head . Position ); wait ( .01 ); end user . Character : MoveTo ( user . Character . Head . Position ) end end end end ) while wait () do if control then control . Velocity = Vector3 . new ( 0 , 40 , 0 ); end end Hold down F and click a part to bring it to you. Then, hold F and click a player to teleport them There's a weird effect which actually brings players with the object if it's a certain mass. You can ONLY move unanchored parts, so in sword fights on the heights, that would be the gyro plates and lava spinners (click them). Sends a packet to the ROBLOX network, either by a hex-formatted String or a Table of bytes.","title":"Send raw"}]}